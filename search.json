[{"title":"蓝桥杯比赛常用函数总结","date":"2021-09-22T06:29:25.000Z","url":"/2021/09/22/%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%AF%94%E8%B5%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/","tags":[["蓝桥杯","/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"],["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["编程技巧","/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"]],"categories":[["蓝桥杯","/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"]],"content":"数据类型的转换，排序函数，比较字符串内容，辗转相除法求最大公约数，vector容器，map容器 数据类型的转换 排序函数 比较字符串内容 辗转相除法求最大公约数 vector 容器 map容器"},{"title":"计算机组成原理1-0：数值数据在计算机中的表示","date":"2021-09-21T02:10:45.000Z","url":"/2021/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%861-0%EF%BC%9A%E6%95%B0%E5%80%BC%E6%95%B0%E6%8D%AE%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/","tags":[["博客","/tags/%E5%8D%9A%E5%AE%A2/"],["计算机基础","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"],["计算机组成原理","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"categories":[["计算机组成原理","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"]],"content":"计算机组成原理1-0：数值数据在计算机中的表示计算机存储信息时，通常先将信息转换成数字进行存储，处于运算效率与存储空间的限制，通常转换成不同的编码（数据存储的形式）进行存储。 知识要点： 前言：计算机存储信息时，通常先将信息转换成数字进行存储，处于运算效率与存储空间的限制，通常转换成不同的编码（数据存储的形式）进行存储。 接下来是对上述几种不同编码介绍： 注意：在计算机存储时通常采用二进制，所以以上几种编码都是采用二进制的形式。 相关概念： 原码，反码，补码和移码原码表示法： &emsp;在符号位与数值位之间，或者数值位末尾有隐含的小数点“.”，不占有计算机的存储空间。&emsp;原码表示数据时清晰易懂，在数据转换时很容易，并且原码能够容易的实现乘除运算；但是在使用原码作 加减运算时较为复杂，所以引出了另外的一种编码——补码。 原码表示中， [+0]原 = 00000 &emsp; [-0]原 = 10000 补码表示法：（①前半部分仅介绍了补码的两个相关概念和补码的作用，可以略读） &emsp;如果有一个钟表，现在指示的时间是11点，而现在的正确时间应该是1点，如果要将其调回正确的时间的话，仅仅通过数学计算 11 - 1 = 10 可以得出，将时针逆时针转动10个刻度（小时）便可以，但是在现实生 活中，我们往往只需要将其顺时针拨动两（2）个刻度便能使其指向准确的时间。 &emsp;上面的例子中，时钟每经过12个刻度便“清零”重新从1刻度开始计算。我们称12为此问题中的“模”，他表示 一个计量器的容量。比如在一个8位二进制存储器中，能存入的最大的数为“1111,1111”，若再加入一个“1”，其整个存储器便变成了“0000,0000”，这时此存储器的模便是“1000,0000”或“512”（十进制）。 &emsp;顺时针转动为“+”，逆时针转动为“-”，-10 与 +2 都能得到最终的“1”，我们称这两个数为同余。 同余的概念：两个整数 A 和 B 同时除以一个正整数道道的余数相同，称为“同余”。 &emsp;由此可得：我们只要知道一个“钟表”的模，如果想将其逆时针旋转一定刻度（减去一段刻度 a）到达某个时 间点，也能通过顺时针旋转（加上一段刻度 b）某段距离来达到相同的目的。我们称 b 是 a 的补数。类似在计 算机中，我们需要两个数作减法运算，也可以通过找减数的补数来换算成加法运算，在计算机中，我们称其为 补码。 计算机中的补码： &emsp;在计算机中，由于使用的是二进制形式，所以当真值为纯小数或纯整数时有如下公式： &emsp;由于二进制的特殊性，我们在计算补码时只需要通过如下规律即可： &emsp;X 为正数时， [X]补 = [X]原 = X &emsp;X 为负数时，X补 = [X]原 两端的1 保持不变，中间所夹的所有数按位取反（0变1，1变0）。 ​ [X] = 0011 时， [X]原 = 0011 &emsp; X补 = 0011； ​ [X] = -0001 时， [X]原= 1001 &emsp; X补= 1111； ​ 补码表示中，[+0]补 = [-0]补 = 00000 反码表示法 ​ 有时也可以直接用原码得到：（大部分使用此方法求反码） 正数求反码：[X]原 = [X]反 &emsp;&emsp;[X]原 = 0101 &emsp; [X]反 = 0101 负数求反码：将原码除符号位外所有的数都按位求反即得到反码： [X]原 = 1011 [X]反 = 1100 反码表示中，[+0]反= 00000 [-0]反 = 11111 用时也可以直接用原码得到：（大部分使用此方法求反码） 正数求反码：[X]原 = [X]反 &emsp;&emsp;[X]原 = 0101 &emsp; [X]反 = 0101 负数求反码：将原码除符号位外所有的数都按位求反即得到反码： ​ [X]原 = 1011 [X]反 = 1100 反码表示中，[+0]反= 00000 [-0]反 = 11111 移码表示法：&emsp;移码主要进行浮点数的存储时使用，（可以先掠过，后面看到浮点数时在反过来看）。&emsp;在原码的基础上个加上一个常数，得到的一个新的编码，称为移码，这个常数我们称为“偏置值 ”。 移码举例（为了便于理解计算，此处的偏移量设为“1”，在实际操作中一般为2n-1）。 几种机器数之间的相互转换：表1-1 机器数的相互转换: 原码-&gt;反码 原码-&gt;补码 原码-&gt;移码 符号位不变，数值位按位取反 1）第一个”1“和最后一个”1“不变，中间的所有位置按位取反 。2)原码转化为反码，在末尾加上”1“。 1）加上偏移值2）符号位取反，其余不变。 机器数的定点表示与浮点表示&emsp;由于计算机存储时并不会存储小数点，并且在小数点所在的位置是不一定的，所以根据小数点是否是固定的，将数据分为“定点表示”和“浮点表示”。&emsp;定点数又分为定点整数和定点小数。 定点表示法：&emsp;所有数据的小数点位置固定不变的一组（或者一类）存储方式存储的数称为定点数。一般小数点固定在数位的最前面（只能表示整数）或者最末尾（只能表示纯小数）。 定点小数：&emsp;定点小数表示的是纯小数。&emsp;小数点的位置固定在最高位有效位之前，符号位之后，小数点的位置是隐含的，不占用存储空间。 特殊值： 表1-2 定点小数的特殊值: 最大正数 最小正数 最小负数 最大负数 十进制 1-2-n 2-n -(1-2-n) -1 机器数 0,1…1 0,0…01 1,1…1 0,0…0 表示范围： 表1-3 定点小数的表示范围: 8位 n位 原码 -（1-2-n）~ 1-2-n -127/128~127/128 补码 -1~1-2-n -1~127/128 ##### 定点整数： &emsp;定点整数表示的是纯整数。 &emsp;小数点的位置固定在最低有效位之后，就是存储器的最后面。可以看作不存在小数点。 表1-4 定点整数的特殊值:| 最大正数 | 最小正数 | 绝对值最大负数（原码）|绝对值最大负数（补码）|–|–|–|–|–| | 2n-1|1|-(2n-1)|-2n 表1-5 定点整数的表示范围: 8位 n+1位 原码 -127~127 - ( 2n-1 ) ~( 2n-1 ) 补码 -128~127 - 2n ~ ( 2n-1 ) 浮点表示法：&emsp;通过上文，我们知道了两种定点数及其表示范围，但是在实际应用中这两种数字类型不能满足现实需求。如果能在计算机中让小数点随意移动，就能更灵活的存储各种不同长度的数据。于是我们发明了类似于此种存储方式的“浮点表示法”。&emsp;我们在小学时学过用科学计数法来表示数字，比如&emsp;&emsp;&emsp;&emsp;&emsp;12000000 = 1.2×107或&emsp;&emsp;&emsp;&emsp;0.0000056 = 5.6×10-6类似的，将前面的数（1.2或5.6）改为二进制的表示形式，后面的位权换为2，有：&emsp;&emsp;&emsp;&emsp;&emsp;N = M·r E&emsp;我们称 M 为尾数，E为阶码，r 通常取2.其中尾数为纯小数，阶码为整数。&emsp;在存储该数据的时候，只需要将M和E存入计算机中计科。&emsp;其中存储的方式有很多，并且由于计算机中存储的是二进制，所以我们要将M和E转化为机器数（原、反、补、移码）存入其中，具体用哪种编码形式根据题目要求判断。这里介绍两种典型的存储方式：一般格式和规格化IEEE754存储格式。 浮点数的一般格式其中，es和e为阶码符号位和数值部分；ms和m为尾数符号位和数值部分。阶码和尾数都用补码表示。表示范围： 表1-6 浮点数的表示范围: 阶码 尾数 十进制 最大整数 0,1…1 1…1 (1-2-n)·22k-1 最小负数 1,0…0 0,0…1 2-n·2-2k 绝对值最大负数 1,1…1 1,0…0 -1·22k-1 ##### IEEE754标准浮点数 &emsp;IEEE754标准浮点数是目前常用的微型计算机中常见的一种浮点数存储格式。 &emsp;在学习IEEE754标准格式之前要认识两个名词——规格化浮点数和移码。 &emsp;1）规格化浮点数&emsp;我们在学习科学计数法时有一个规定：&emsp;如 a×10n ; 其中要求:&emsp;&emsp; 1 ≤ a ≤ 10&emsp;类似的，在浮点数的存储中，也有相似的规定：&emsp;对于浮点数:&emsp;&emsp;N = M × r E&emsp;&emsp;有： 1/r ≤ M &lt; 1&emsp;例如：对于浮点数：1,0001 1011 可以写成：&emsp;0.1011×2-2；&emsp; 1.011×2-4;&emsp; 10.11×2-4&emsp;其中只有0.1011×2-2是规格化形式。 &emsp;2）阶码的移码表示法&emsp;关于移码的知识点上文已经提及到了，这里主要讲解如何计算移码。&emsp;a.已知原码求阶码，用原码加上阶码；&emsp;b.已知阶码求原码，用阶码减去偏移量。&emsp;对于偏移量，在IEEE754中（二进制）是由n-1个1构成（n表示阶码占有的位数）。具体的偏移量可以参考下面的表格。 IEEE754标准浮点数： &emsp;在原有的学习中，规定一类新的浮点数存储格式，为：称用此种形式存储浮点数的格式为IEEE754标准浮点数。根据计算机提供的存储位数不同，其中的E和m的占用空间也不同，由此分为三类：&emsp;在计算机存储尾数时，使用规格化之后的格式，故尾数数值第一位总为1，为了节约存储空间，提高存储精度，在存入计算机时，常将这个1 省略。例如：&emsp;存入13时:&emsp; (13)10 = (1101)2 = 1.101× 2 3&emsp;其中整数位上的1 省略只存入 101 。 例题②： 1-1 将(100.0 25)10转换成短浮点数格式。 &emsp; ①把十进制数转换成二进制数。&emsp;&emsp;(100. 2)10-=(00100.0)2 &emsp; ②规格化二进制数。 &emsp; &emsp;1100100. 01 = 1.10010001×26 &emsp;③计算出阶码的移码(偏置值+阶码真值)。 &emsp;&emsp;1111111 + 110 = 10000101 ④以短浮点数格式存储该数。 因为，&emsp;&emsp;符号位 = 0&emsp;&emsp;阶码 = 10000101&emsp;&emsp;尾数 = 10010001000000000000000所以，短浮点数代码为:&emsp;&emsp;0;10000101 ;10010001000000000000000 表示为十六进制的代码: 42C88000H。 1-2：把短浮 点数C1C90000H 转换成十进制数。 ①将十六进制代码写成二进制形式，并分离出符号位阶码和尾数。因为：&emsp;&emsp;C1C90000H = 1100 0001 1100 1001 0000 0000 0000 0000所以：&emsp;&emsp;符号位 = 1;&emsp;&emsp;阶码 = 10000011；&emsp;&emsp;尾数 = 10010010000000000000000 ②计算出阶码真值(移码减去偏置值)。&emsp;&emsp;10000011 - 1111111 = 100&emsp;&emsp;(100)2 = 410 ③以规格化二进制数形式写出此数。&emsp;&emsp;1.1001001×24 ④写成非规格化二进制数形式。&emsp;&emsp;11001.001 ⑤转换成十进制数,并加上符号位。 &emsp;&emsp;(11001.001)2 = (25.125)10 所以，该浮点数 = -25.125 附录：注释：①这里介绍的并不太好理解，在以后会加以补充。②例题来自参考书籍《计算机组成原理（第四版）》P27 参考书籍：[1]蒋本珊.计算机组成原理.4版.北京：清华大学，2019."},{"title":"Hello World","date":"2021-09-20T01:39:34.030Z","url":"/2021/09/20/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]